trigger:
- master

variables:
  CBLOSC2_CACHE_FOLDER: $(Build.SourcesDirectory)/c-blosc2/build/
  BLOSC_INCLUDE: $(Build.SourcesDirectory)/c-blosc2/blosc/

strategy:
  matrix:
    linux-release:
      imageName: 'ubuntu-16.04'
      BUILD_CONFIGURATION: RelWithDebInfo
      BLOSC_DIR: $(Build.SourcesDirectory)/c-blosc2/build/blosc/
pool:
  vmImage: $(imageName)

steps:
  - bash: |
      export PATH=$PATH:$(Build.SourcesDirectory)/c-blosc2/build/blosc/$(BUILD_CONFIGURATION):$(Build.SourcesDirectory)/build

  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: |
      git clone https://github.com/Blosc/c-blosc2.git
      cd c-blosc2/
      git rev-parse --verify HEAD > ../blosc.commit

  - task: CacheBeta@0
    inputs:
      key: v3 | cblosc2 | $(Agent.OS) | $(BUILD_CONFIGURATION) | blosc.commit
      path: $(CBLOSC2_CACHE_FOLDER)
      cacheHitVar: CACHE_RESTORED
    displayName: 'Cache c-blosc2'

  - bash: |
      cd c-blosc2/
      mkdir build
      cd build/
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_CONFIGURATION) -DDEACTIVATE_AVX2=ON ..
      cmake --build .
    condition: ne(variables.CACHE_RESTORED, 'true')
    displayName: 'Build c-blosc2'


  - bash: |
      mkdir build
      cd build/
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_CONFIGURATION) -DBLOSC_DIR=$(BLOSC_DIR) -DBLOSC_INCLUDE=$(BLOSC_INCLUDE) -DDO_COVERAGE=TRUE ..
      cmake --build .
    displayName: 'Build caterva'

  - bash: |
      cd build/
      ctest -T Test
    displayName: 'Tests'


  - bash: |
      conda install -y -c conda-forge gcovr
      ls -l $CONDA/bin
      mv build/CMakeFiles/caterva_shared.dir/caterva/*.gc* caterva/
      mv caterva/caterva.c.gcno caterva/caterva.gcno
      mv caterva/caterva.c.gcda caterva/caterva.gcda
      mkdir htmlcov/
      ls -l caterva/

  - bash: |
      gcovr -v -r caterva/ --html --html-details -o htmlcov/index.html
      cat htmlcov/coverage.html
      ls -l $(System.DefaultWorkingDirectory)/htmlcov
      cp $(System.DefaultWorkingDirectory)/build/Testing/**/Coverage.xml htmlcov/

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: 'build/Testing/*/Test.xml'
    displayName: 'Publish Tests'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/Testing/**/Coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
